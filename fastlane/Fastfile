# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'httparty'

default_platform(:ios)

build_path = "BuildTemp/Archives"
derived_data_path = "DerivedData"
ios_plist = "./Info.plist"
project = './PlaybookShowcase/PlaybookShowcase.xcodeproj'

def target_ios(suffix = nil)
  target = 'PlaybookShowcase-iOS'
  # suffix ? "#{target}-#{suffix}" : target
  target
end

def target_macos(suffix = nil)
  target = 'PlaybookShowcase-macOS'
  # suffix ? "#{target}-#{suffix}" : target
  target
end

desc "Set up build. build_number:1"
lane :setup_before_build do |opts|
  # sets the build number
  increment_build_number(build_number: "#{opts[:build_number]}")
end

desc "Build iOS"
lane :build_ios do |opts|

  export_method = 'enterprise'
  target = target_ios(opts[:suffix])

  configuration = opts[:suffix] == "beta" ? "Beta" : "Release" 

  gym(
    configuration: configuration,
    project: project,
    scheme: target,
    skip_package_dependencies_resolution: false,
    export_method: export_method,
    output_name: "#{target}.ipa",
    build_path: build_path,
    derived_data_path: derived_data_path,
    xcargs: '-skipPackagePluginValidation -skipMacroValidation',
    xcconfig: './PlaybookShowcase/Versioning.xcconfig'
  )
end

desc "Build macOS"
lane :build_macos do |opts|

  export_method = 'developer-id'
  target = target_macos(opts[:suffix])

  gym(
    project: project,
    scheme: target,
    skip_package_pkg: true,
    skip_package_dependencies_resolution: true,
    export_method: export_method,
    output_name: "#{target}.app",
    build_path: build_path,
    derived_data_path: derived_data_path,
    xcargs: '-skipPackagePluginValidation -skipMacroValidation',
    xcconfig: './PlaybookShowcase/Versioning.xcconfig'
  )
end

desc "Install provisioning profiles iOS"
lane :install_prov_profiles_ios do
  sh 'rm -rf ./git_prov_profiles'
  sh 'cp -r ./../git_prov_profiles ./git_prov_profiles'
  Dir.glob("./git_prov_profiles/profiles/*.mobileprovision") do |item|
    install_provisioning_profile(path: item)
  end
end

desc "Install provisioning profiles macOS"
lane :install_prov_profiles_macos do
  sh 'rm -rf ./git_prov_profiles'
  sh 'cp -r ./../git_prov_profiles ./git_prov_profiles'
  Dir.glob("./git_prov_profiles/profiles_macos/*.provisionprofile") do |item|
    install_provisioning_profile(path: item)
  end
end

desc "Upload iOS build"
lane :upload_ios do |opts|
  keep_trying {
    opts[:platform] = "ios"
    distribute_to_mdm(opts)
  }
end

desc "Export App Pass to Environment"
lane :export_app_pass do |opts|
  # Add app-specific-password to environment variable
  sh "echo FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=#{opts[:app_specific_pass]} >> .env"
end

desc "Notarize macOS build"
lane :notarize_macos do |opts|
keep_trying {
    notarize(
      package: "#{target_macos(opts[:suffix])}.app",
      username: "#{ENV['APPLE_ID']}",
      asc_provider: "#{ENV['TEAM_ID']}",
      print_log: true
    )
  }
end

desc "Upload macOS build"
lane :upload_macos do |opts|
  keep_trying {
    opts[:platform] = "macos"
    distribute_to_mdm(opts)
  }
end

desc "Upload to Nitro MDM"
lane :distribute_to_mdm do |opts|

  target = opts[:type]
  build_number = opts[:build_number]
  platform = opts[:platform]
  mdm_api_token = opts[:nitro_mdm_api_token]
  upload_address = "https://nitro.powerhrg.com/mdm/api/v1/builds"

  app_id = "com.powerhrg.PlaybookShowcase.dev"
  if target == 'production'
    app_id = "com.powerhrg.PlaybookShowcase"
  end

  # New properties
  pr_link = "https://github.com/powerhome/playbook-swift/pull/#{opts[:pr_number]}"
  pr_name = opts[:release_notes]
  pr_number = opts[:pr_number]
  version_number = opts[:version]

  file_path = "../#{target_ios(opts[:suffix])}.ipa"
  if platform == "macos"
    file_path = "../#{target_macos(opts[:suffix])}.app.zip"
  end
  output_file = "../upload-build-to-nitro-details.json"

  # Copying to MDM S3
  curl = <<-SHELL 
    curl -v -sS #{upload_address} \
      -F platform="#{platform}" \
      -F app_id="#{app_id}" \
      -F build_number="#{build_number}" \
      -F pr_link="#{pr_link}" \
      -F pr_name="#{pr_name}" \
      -F pr_number="#{pr_number}" \
      -F version_number="#{version_number}" \
      -F file="@#{file_path}" \
      -H "Authorization: #{mdm_api_token}" \
      -o "#{output_file}"
    if [[ $? -ne 0 ]] || grep -q errors "#{output_file}"; then
      echo "---------------------------------"
      echo ">>> There has been an error uploading the artifact to Nitro."
      cat "#{output_file}"
      exit 1
    fi
    jq . "#{output_file}"
  SHELL

  sh "#{curl}"
end

desc "Create Runway comment"
lane :create_runway_comment do |opts|

  runway_api_token = opts[:runway_api_token]
  runway_backlog_item_id = opts[:runway_backlog_item_id]
  github_pull_request_id = opts[:github_pull_request_id]
  type = opts[:type]
  build_number = opts[:build_number]
  release_notes = "#{opts[:release_notes]}"

  app_id = "com.powerhrg.PlaybookShowcase.dev"
  if type == 'production'
    app_name = "com.powerhrg.PlaybookShowcase"
  end

  merged_comment = ''
  if type == 'production'
    merged_comment = "✅ MERGED ✅\n\n"
  end

  comment = <<~HEREDOC
  <p><b>#{merged_comment}#{type} build #{build_number}</b></p>
  <ul>
    <li>PlaybookShowcase-iOS: <a href=#{"https://nitro.powerhrg.com/mdm/app_builds/#{app_id}/iOS"}>iOS Build #{build_number}</a></li>
    <li>PlaybookShowcase-macOS: <a href=#{"https://nitro.powerhrg.com/mdm/app_builds/#{app_id}/macOS"}>macOS Build #{build_number}</a></li>
  </ul>
  HEREDOC

  UI.message(comment)

  payload = {
    backlog_item_id: runway_backlog_item_id,
    comment: comment
  }.to_json

  response = HTTParty.post(
    'https://runway.powerhrg.com/webhooks/backlog_item_comment/' + runway_api_token,
    body: payload,
    headers: { 'Content-Type' => 'application/json' }
  )

  UI.message("Runway response code: #{response.code}")
end

def keep_trying(ignore=[], interval=300, retry_counter=0, &block)
  begin
    block.call
  rescue => ex
    ignore.each do |val|
      if ex.message.include?(val)
        return
      end
    end
    retry_counter +=1
    if retry_counter <= 3
      UI.error ex.message
      UI.error "Retrying (#{retry_counter}) in #{interval/60} minutes..."
      sleep interval
      keep_trying(ignore, interval, retry_counter) { block.call }
    else
      raise ex
    end
  end
  nil
end
